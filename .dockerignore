imdi asil probleme geciyoruz 
Case Study for Junior .NET Developers Objective This case study is designed to give junior .NET developers practical experience in creating a fully functional Web API using .NET Core. The solution will integrate Hangfire for background job processing, incorporate web scraping to fetch data from an external website, and be Dockerized using Docker Compose for containerized deployment. Requirements Web API The Web API will include three endpoints: Create, Get, and Delete. The Create endpoint will accept a POST request to add a new tracking number, with the request body containing a JSON object like { "trackingNumber": "XXX" }. The Get endpoint will provide a way to retrieve all tracking numbers along with their current statuses, returning a JSON array in the format [ { "trackingNumber": "XXX", "status": "In Transit" }, ... ]. The Delete endpoint will accept a DELETE request to remove a specific tracking number by its identifier. Hangfire Integration Hangfire will be used to manage a recurring background job. This job will run every 10 seconds to check the status of each tracking number by scraping the PTT Tracking Website (https://gonderitakip.ptt.gov.tr/). The scraped status for each tracking number must be stored or updated in a data store accessible to the API. Dockerization The entire solution must be containerized using Docker. A Dockerfile should be created for the Web API, and a docker-compose.yml file should be configured to build and run the Web API container. The setup should also include a container for the Hangfire Dashboard to monitor background jobs. The solution must be easily deployable and fully functional in the Dockerized environment. docker kismini yapmamiz lazim sana proje hakkinda detay veriyim projemde iki database var suan biri hangfire icin digeri modellerim icin ikiside dockerda ayakta simdi benden gerekli olan bilgileri iste bunun sonucunda bir dockerfile ve docker-compose.yml yazarak projeyi docker ortamina tasiyalim
C:\Users\Selim\Desktop\TrackingApi\src\TrackingApi\TrackingApi.csproj dosyanin yolu bu oncelikle veritabanlarim mssql ikiside 
"ConnectionStrings": {
  "TrackingDB": "Server=localhost,51433;Database=TrackingDatabase;User=sa;Password=123456aA*;Trust Server Certificate=True",
  "HangfireDB": "Server=localhost,51434;Database=HangfireDatabase;User=sa;Password=123456aA*;Trust Server Certificate=True"
}, connection stringlerim bunlar burada port numaralari var zarten hangifre dashboardi nasil ayri porta tasiycagimi bilmiyorum projenin icinde nuget paket olarak yuklu ve kullaniyorum evet Htmlagilitypack kullaniyorum bu da projeye dahil proje zaten hali hazirda calisiyor her seyiyle 
<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <UserSecretsId>5dea0aac-0ee4-4a86-988c-df16ab7ac981</UserSecretsId>
    <DockerDefaultTargetOS>Linux</DockerDefaultTargetOS>
    <DockerfileContext>..\..</DockerfileContext>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Hangfire" Version="1.8.17" />
    <PackageReference Include="Hangfire.AspNetCore" Version="1.8.17" />
    <PackageReference Include="Hangfire.SqlServer" Version="1.8.17" />
    <PackageReference Include="HtmlAgilityPack" Version="1.11.72" />
    <PackageReference Include="Microsoft.EntityFrameworkCore" Version="9.0.1" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" Version="9.0.1" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="9.0.1">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.VisualStudio.Azure.Containers.Tools.Targets" Version="1.21.0" />
    <PackageReference Include="Polly" Version="8.5.1" />
    <PackageReference Include="Swashbuckle.AspNetCore" Version="6.6.2" />
  </ItemGroup>

</Project>
using Hangfire;
using Microsoft.EntityFrameworkCore;
using TrackingApi.BackgroundJobs.Jobs;
using TrackingApi.BackgroundJobs.Services;
using TrackingApi.Data;
using TrackingApi.Services;
using TrackingApi.Services.Interfaces;

var builder = WebApplication.CreateBuilder(args);

builder.Services.AddHangfire(configuration => configuration
    .SetDataCompatibilityLevel(CompatibilityLevel.Version_170)
    .UseSimpleAssemblyNameTypeSerializer()
    .UseRecommendedSerializerSettings()
    .UseSqlServerStorage(builder.Configuration.GetConnectionString("HangfireDB")));
// Add services to the container.
var connectionString = builder.Configuration.GetConnectionString("TrackingDB");
builder.Services.AddDbContext<AppDbContext>(options =>
{
    options.UseSqlServer(connectionString);
});

builder.Services.AddScoped<ITrackingBackgroundJob, TrackingBackgroundJob>();
builder.Services.AddScoped<ITrackingService, TrackingService>();
builder.Services.AddHttpClient<IPttScraper, PttScraper>();

builder.Services.AddHangfireServer();

builder.Services.AddControllers();
// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

var app = builder.Build();



// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}
app.UseHangfireDashboard();
// Configure recurring job - every 10 seconds
RecurringJob.AddOrUpdate<ITrackingBackgroundJob>(
    "update-tracking-statuses",
    job => job.UpdateAllTrackingStatuses(),
    "*/10 * * * * *"); // Cron expression for every 10 seconds
app.UseHttpsRedirection();

app.UseAuthorization();

app.MapControllers();

app.Run();